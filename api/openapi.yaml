openapi: 3.0.3
info:
  title: Push Notification Service API
  description: |
    A real-time push notification service built with Go, featuring WebSocket connections, 
    Kafka message queuing, and MongoDB persistence. Designed for microservices architecture 
    with JWT authentication support.
    
    ## Authentication
    The service expects JWT validation to be handled by an upstream gateway. The gateway should:
    1. Validate JWT tokens
    2. Extract user information  
    3. Forward requests with `X-User-Username` header
    
    ## WebSocket Connection
    Connect to WebSocket endpoint: `ws://localhost:8080/ws?username={username}`
  version: 1.0.0
  contact:
    name: taekwondodev
    url: https://github.com/taekwondodev/push-notification-service

servers:
  - url: http://localhost:8080
    description: Development server

tags:
  - name: notifications
    description: Notification management operations
  - name: websocket
    description: Real-time WebSocket connections

paths:
  /notifications:
    get:
      tags:
        - notifications
      summary: Get user notifications
      description: |
        Retrieve notifications for the authenticated user. Supports filtering by read status.
      parameters:
        - name: unread
          in: query
          description: Filter to show only unread notifications
          required: false
          schema:
            type: boolean
            default: false
          example: true
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
              examples:
                all_notifications:
                  summary: All notifications
                  value:
                    - id: "507f1f77bcf86cd799439011"
                      sender: "alice"
                      receiver: "bob"
                      message: "Hello Bob!"
                      read: false
                      createdAt: 1703858400
                    - id: "507f1f77bcf86cd799439012"
                      sender: "charlie"
                      receiver: "bob"
                      message: "Meeting at 3 PM"
                      read: true
                      createdAt: 1703772000
                unread_only:
                  summary: Unread notifications only
                  value:
                    - id: "507f1f77bcf86cd799439011"
                      sender: "alice"
                      receiver: "bob"
                      message: "Hello Bob!"
                      read: false
                      createdAt: 1703858400
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - notifications
      summary: Send a notification
      description: |
        Send a new notification to a user. The notification is queued via Kafka and 
        delivered in real-time to connected WebSocket clients.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
            examples:
              simple_message:
                summary: Simple text message
                value:
                  receiver: "bob"
                  message: "Hello Bob!"
              urgent_notification:
                summary: Urgent notification
                value:
                  receiver: "alice"
                  message: "Your order has been shipped!"
      responses:
        '202':
          description: Notification accepted and queued for delivery
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: "Notification queued successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /notifications/{id}:
    patch:
      tags:
        - notifications
      summary: Mark notification as read
      description: Mark a specific notification as read by its ID
      parameters:
        - name: id
          in: path
          description: Notification ID (MongoDB ObjectID)
          required: true
          schema:
            type: string
            format: objectid
          example: "507f1f77bcf86cd799439011"
      responses:
        '200':
          description: Notification marked as read successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
              example:
                message: "Notification marked as read"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /ws:
    get:
      tags:
        - websocket
      summary: WebSocket connection endpoint
      description: |
        Establish a WebSocket connection for real-time notifications.
        
        **Connection URL:** `ws://localhost:8080/ws?username={username}`
        
        **Events:**
        - Connected clients automatically receive notifications sent to their username
        - Notifications are sent as JSON objects matching the Notification schema
        
        **Example JavaScript:**
        ```javascript
        const ws = new WebSocket('ws://localhost:8080/ws?username=alice');
        
        ws.onmessage = (event) => {
          const notification = JSON.parse(event.data);
          console.log('New notification:', notification);
        };
        ```
      parameters:
        - name: username
          in: query
          description: Username for WebSocket connection
          required: true
          schema:
            type: string
          example: "alice"
      responses:
        '101':
          description: WebSocket connection established
        '400':
          description: Bad request - missing username parameter
        '500':
          description: Internal server error

components:
  schemas:
    Notification:
      type: object
      description: A notification object
      required:
        - id
        - sender
        - receiver
        - message
        - read
        - createdAt
      properties:
        id:
          type: string
          format: objectid
          description: Unique notification identifier (MongoDB ObjectID)
          example: "507f1f77bcf86cd799439011"
        sender:
          type: string
          description: Username of the notification sender
          example: "alice"
        receiver:
          type: string
          description: Username of the notification receiver
          example: "bob"
        message:
          type: string
          description: Notification message content
          example: "Hello Bob!"
        read:
          type: boolean
          description: Whether the notification has been read
          example: false
        createdAt:
          type: integer
          format: int64
          description: Unix timestamp when the notification was created
          example: 1703858400

    NotificationRequest:
      type: object
      description: Request payload for sending a notification
      required:
        - receiver
        - message
      properties:
        receiver:
          type: string
          description: Username of the notification receiver
          example: "bob"
        message:
          type: string
          description: Notification message content
          minLength: 1
          maxLength: 1000
          example: "Hello Bob!"

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message
          example: "Operation completed successfully"

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          description: HTTP status code
          example: 400
        message:
          type: string
          description: Error message
          example: "Invalid request"

  responses:
    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 400
            message: "bad request"

    Unauthorized:
      description: Unauthorized - missing or invalid authentication
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 401
            message: "authentication required"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 404
            message: "notification not found"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 500
            message: "internal server error"

  securitySchemes:
    GatewayAuth:
      type: apiKey
      in: header
      name: X-User-Username
      description: |
        Username provided by the authentication gateway. 
        The gateway validates JWT tokens and forwards the username in this header.

security:
  - GatewayAuth: []

externalDocs:
  description: GitHub Repository
  url: https://github.com/taekwondodev/push-notification-service